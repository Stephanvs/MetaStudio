<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Hayman.Shell.Controls">

    <!-- Outer Border Styles for the various Button States-->
    <Style x:Key="outerBorderNormal" TargetType="{x:Type Border}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="2"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style x:Key="outerBorderHover" TargetType="{x:Type Border}" BasedOn="{StaticResource outerBorderNormal}">
        <Setter Property="BorderBrush" Value="#66000000"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style x:Key="outerBorderPressed" TargetType="{x:Type Border}" BasedOn="{StaticResource outerBorderNormal}">
        <Setter Property="BorderThickness" Value="2,2,2,1"/>
        <Setter Property="BorderBrush" Value="#66000000"/>
        <Setter Property="Background" Value="#33000000"/>
    </Style>

    <Style x:Key="outerBorderDefaulted" TargetType="{x:Type Border}" BasedOn="{StaticResource outerBorderNormal}">
        <Setter Property="BorderBrush" Value="#33000000"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <!-- inner Border Styles for the various Button States-->
    <Style x:Key="innerBorderNormal" TargetType="{x:Type Border}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="2"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style x:Key="innerBorderHover" TargetType="{x:Type Border}" BasedOn="{StaticResource innerBorderNormal}">
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="#00FFFFFF" Offset="0"/>
                    <GradientStop Color="#7FFFFFFF" Offset="0.1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="#66FFFFFF" Offset="0"/>
                    <GradientStop Color="#00FFFFFF" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="innerBorderPressed" TargetType="{x:Type Border}" BasedOn="{StaticResource innerBorderNormal}">
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="Background" Value="{x:Null}"/>
    </Style>

    <Style x:Key="innerBorderDefaulted" TargetType="{x:Type Border}" BasedOn="{StaticResource innerBorderPressed}"/>

    <Style TargetType="{x:Type controls:SplitButton}">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <!-- SplitButton Template -->
                <ControlTemplate TargetType="{x:Type controls:SplitButton}">

                    <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <!-- Button Border-->
                        <Border x:Name="outerBorder1" Grid.ColumnSpan="2" Style="{StaticResource outerBorderNormal}">
                            <Border x:Name="innerBorder1" Style="{StaticResource innerBorderNormal}" Background="Transparent"/>
                        </Border>

                        <!-- Dropdown Button Border-->
                        <Border x:Name="outerBorder2" Margin="-1,0,0,0" Grid.Column="1" Style="{StaticResource outerBorderNormal}">
                            <Border x:Name="innerBorder2" Style="{StaticResource innerBorderNormal}"/>
                        </Border>

                        <Border x:Name="Bd" Margin="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Center">
                            <WrapPanel>
                                <StackPanel Height="15" x:Name="IconFrame" Visibility="Collapsed" Margin="0,4,10,0">
                                    <Border Background="Transparent" BorderThickness="0" HorizontalAlignment="Center" VerticalAlignment="Center">
                                        <Path x:Name="PART_Icon"
                                              Style="{TemplateBinding IconStyle}"
                                              Width="10"
                                              Height="10"
                                            />
                                    </Border>
                                    <Border Height="10" Width="10" ClipToBounds="False">
                                        <Border.Background>
                                            <VisualBrush Visual="{Binding ElementName=PART_Icon}" Opacity="0.50">
                                                <VisualBrush.Transform>
                                                    <ScaleTransform ScaleX="1" ScaleY="-1" CenterX="5" CenterY="5"></ScaleTransform>
                                                </VisualBrush.Transform>
                                            </VisualBrush>
                                        </Border.Background>
                                        <Border.OpacityMask>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                <GradientStop Offset="0" Color="White"></GradientStop>
                                                <GradientStop Offset="0.6" Color="Transparent"></GradientStop>
                                            </LinearGradientBrush>
                                        </Border.OpacityMask>
                                    </Border>
                                </StackPanel>

                                <ContentPresenter
                                        Margin="0,0,10,0" 
    								    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
    								    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
    								    RecognizesAccessKey="True"
    								/>

                                <Path x:Name="path"
                                          Margin="0,4,0,0"
                                          Data="M0,0L3,3 6,0z" 
                                          Stroke="{TemplateBinding Foreground}" 
                                          Fill="{TemplateBinding Foreground}" 
                                          HorizontalAlignment="Center" 
                                          VerticalAlignment="Center"
                                 />
                            </WrapPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefault" Value="True">
                            <Setter Property="Style" TargetName="outerBorder1" Value="{StaticResource outerBorderDefaulted}"/>
                            <Setter Property="Style" TargetName="innerBorder1" Value="{StaticResource innerBorderDefaulted}"/>
                            <Setter Property="Style" TargetName="outerBorder2" Value="{StaticResource outerBorderDefaulted}"/>
                            <Setter Property="Style" TargetName="innerBorder2" Value="{StaticResource innerBorderDefaulted}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Style" TargetName="outerBorder1" Value="{StaticResource outerBorderHover}"/>
                            <Setter Property="Style" TargetName="innerBorder1" Value="{StaticResource innerBorderHover}"/>
                            <Setter Property="Style" TargetName="outerBorder2" Value="{StaticResource outerBorderHover}"/>
                            <Setter Property="Style" TargetName="innerBorder2" Value="{StaticResource innerBorderHover}"/>
                        </Trigger>
                        <Trigger Property="IsContextMenuOpen" Value="True">
                            <Setter Property="Style" TargetName="outerBorder1" Value="{StaticResource outerBorderPressed}"/>
                            <Setter Property="Style" TargetName="innerBorder1" Value="{StaticResource innerBorderPressed}"/>
                            <Setter Property="Style" TargetName="outerBorder2" Value="{StaticResource outerBorderPressed}"/>
                            <Setter Property="Style" TargetName="innerBorder2" Value="{StaticResource innerBorderPressed}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD"/>
                        </Trigger>
                        <Trigger Property="Mode" Value="Dropdown">
                            <Setter Property="Visibility" TargetName="outerBorder2" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="Mode" Value="Button">
                            <Setter Property="Visibility" TargetName="path" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="outerBorder2" Value="Collapsed"/>
                            <Setter Property="Grid.ColumnSpan" TargetName="Bd" Value="2"/>
                        </Trigger>
                        <Trigger Property="ShowIcon" Value="True">
                            <Setter Property="Visibility" TargetName="IconFrame" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
